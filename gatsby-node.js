const path = require("path");
const languages = require("./src/i18n/languages");
const {
  tagsPath,
  getCreaturesUrl,
  getTagValueUrl,
  localizedSlug,
} = require("./src/utils/url-helpers");
const { parseTags } = require("./src/utils/tags-helpers");

exports.onCreatePage = ({ page, actions }) => {
  const { createPage, deletePage } = actions;

  // Delete the page autogenerated by Gatsby
  deletePage(page);

  Object.entries(languages).map(([lang, langProps]) => {
    const localizedPath = langProps.path + page.path;

    return createPage({
      ...page, // original page
      path: localizedPath,
      context: {
        ...page.context,
        language: langProps,
        locale: lang,
        dateFormat: langProps.dateFormat,
      },
    });
  });
};

// Correcting language and slug to the frontmatter of each file
// A new node is created automatically with the filename
// It's necessary to do that to filter by language
// And the slug make sure the urls will be the same for all pages
exports.onCreateNode = ({ node, actions }) => {
  const { createNodeField } = actions;

  var isMarkdownFile = node.internal.type === "MarkdownRemark";
  if (isMarkdownFile) {
    // Expected format of node.fileAbsolutePath is
    // "path/filename.en.md" where "en" is language code
    // https://nodejs.org/api/path.html#path_path_basename_path_ext
    const name = path.basename(node.fileAbsolutePath, ".md");
    const slug = name.slice(0, -3); //".en".length = 3
    const language = name.slice(-2); //"en".length = 2
    const isDefault = language && languages[language].default;

    createNodeField({ node, name: "slug", value: slug });
    createNodeField({ node, name: "locale", value: language });
    createNodeField({ node, name: "isDefault", value: isDefault });
  }
};

exports.createPages = async ({ graphql, actions }) => {
  const { createPage } = actions;

  const creatureTemplate = path.resolve("./src/templates/creature.js");
  const creatureListTemplate = path.resolve("./src/templates/creatures.js");
  const pageTemplate = path.resolve("./src/templates/page.js");
  const tagListTemplate = path.resolve("./src/templates/tags.js");

  const result = await graphql(`
    {
      files: allMarkdownRemark(
        sort: { fields: [frontmatter___date], order: DESC }
      ) {
        edges {
          node {
            fields {
              locale
              isDefault
              slug
            }
            frontmatter {
              title
              description
              path
              id
              page
              origin
              categories
              number
              habitat
            }
          }
        }
      }
    }
  `);

  if (result.errors) {
    console.error(result.errors);
    return;
  }

  const pageContentFromMarkdown = result.data.files.edges;
  const tags = parseTags(pageContentFromMarkdown);

  pageContentFromMarkdown.forEach(({ node: file }) => {
    const slug = file.fields.slug;
    const id = file.frontmatter.id;

    //fields created in exports.onCreateNode
    const locale = file.fields.locale;
    const isDefault = file.fields.isDefault;

    const isPage = file.frontmatter.page; //only pages should have this field set
    const template = isPage ? pageTemplate : creatureTemplate;

    createPage({
      path: localizedSlug({ isDefault, locale, slug, isPage }),
      component: template,
      context: {
        language: languages[locale],
        locale: locale,
        id: id,
      },
    });
  });

  function createPaginatedPages(
    totalItems,
    language,
    getUrl,
    template,
    context = {},
  ) {
    const itemsPerPage = 4;
    const globAny = "*";
    const pageCount = Math.ceil(totalItems / itemsPerPage);

    Array.from({ length: pageCount }).forEach((_, index) => {
      createPage({
        path: language.path + getUrl(index),
        component: template,
        context: {
          limit: itemsPerPage,
          skip: index * itemsPerPage,
          numPages: pageCount,
          currentPage: index + 1,
          language: language,
          locale: language.code,
          dateFormat: language.dateFormat,
          origin: context.origin || globAny,
          categories: context.categories || globAny,
          number: context.number || globAny,
          habitat: context.habitat || globAny,
        },
      });
    });
  }

  Object.entries(languages).forEach(([lang, langProps]) => {
    //create tags list
    createPage({
      path: langProps.path + tagsPath,
      component: tagListTemplate,
      context: {
        language: langProps,
        locale: lang,
      },
    });

    //create paginated creatures list
    const creaturePagesCount = pageContentFromMarkdown.filter(
      page => !page.node.frontmatter.page && page.node.fields.locale === lang,
    ).length;

    createPaginatedPages(
      creaturePagesCount,
      langProps,
      getCreaturesUrl,
      creatureListTemplate,
    );

    //create paginated tag search results
    Object.entries(tags).forEach(([tag, values]) => {
      if (values && values.length > 0) {
        values.forEach(value => {
          const creaturePagesCount = pageContentFromMarkdown.filter(
            page =>
              !page.node.frontmatter.page &&
              page.node.fields.locale === lang &&
              page.node.frontmatter[tag] &&
              (page.node.frontmatter[tag] === value ||
                page.node.frontmatter[tag].includes(value)),
          ).length;

          const context = {};
          context[tag] = value;

          createPaginatedPages(
            creaturePagesCount,
            langProps,
            pageIndex => getTagValueUrl(tag, value, pageIndex),
            creatureListTemplate,
            context,
          );
        });
      }
    });
  });
};

exports.createSchemaCustomization = ({ actions, schema }) => {
  const { createTypes } = actions;
  const typeDefs = [
    schema.buildObjectType({
      name: "MarkdownRemark",
      fields: { frontmatter: "Frontmatter!" },
      interfaces: ["Node"],
      extensions: { infer: true },
    }),
    schema.buildObjectType({
      name: "Frontmatter",
      fields: {
        //all
        title: { type: "String!" },
        description: { type: "String!" },
        id: "String!",
        //pages
        path: "String",
        page: "Boolean",
        //creatures
        names: { type: "[Name!]" },
        categories: { type: "[String!]" },
        origin: { type: "[String!]" },
        map: { type: "String" },
        related: { type: "[Frontmatter!]" },
        number: { type: "String" },
        habitat: { type: "[String!]" },
        wikipedia: { type: "String" },
        date: {
          type: "Date!",
          extensions: { dateformat: {} },
        },
      },
    }),
    schema.buildObjectType({
      name: "Name",
      fields: {
        name: { type: "String!" },
        plural: { type: "String!" },
        language: { type: "String!" },
      },
    }),
  ];
  createTypes(typeDefs);
};
